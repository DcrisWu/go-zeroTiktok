// Code generated by goctl. DO NOT EDIT.
// Source: comment.proto

package commentclient

import (
	"context"

	"go-zeroTiktok/comment-service/pb/comment"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CommentInfo       = comment.CommentInfo
	CommentListReq    = comment.CommentListReq
	CommentListResp   = comment.CommentListResp
	CreateCommentReq  = comment.CreateCommentReq
	CreateCommentResp = comment.CreateCommentResp
	DeleteCommentReq  = comment.DeleteCommentReq
	DeleteCommentResp = comment.DeleteCommentResp

	Comment interface {
		CreateComment(ctx context.Context, in *CreateCommentReq, opts ...grpc.CallOption) (*CreateCommentResp, error)
		DeleteComment(ctx context.Context, in *DeleteCommentReq, opts ...grpc.CallOption) (*DeleteCommentResp, error)
		CommentList(ctx context.Context, in *CommentListReq, opts ...grpc.CallOption) (*CommentListResp, error)
	}

	defaultComment struct {
		cli zrpc.Client
	}
)

func NewComment(cli zrpc.Client) Comment {
	return &defaultComment{
		cli: cli,
	}
}

func (m *defaultComment) CreateComment(ctx context.Context, in *CreateCommentReq, opts ...grpc.CallOption) (*CreateCommentResp, error) {
	client := comment.NewCommentClient(m.cli.Conn())
	return client.CreateComment(ctx, in, opts...)
}

func (m *defaultComment) DeleteComment(ctx context.Context, in *DeleteCommentReq, opts ...grpc.CallOption) (*DeleteCommentResp, error) {
	client := comment.NewCommentClient(m.cli.Conn())
	return client.DeleteComment(ctx, in, opts...)
}

func (m *defaultComment) CommentList(ctx context.Context, in *CommentListReq, opts ...grpc.CallOption) (*CommentListResp, error) {
	client := comment.NewCommentClient(m.cli.Conn())
	return client.CommentList(ctx, in, opts...)
}
